# Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

search blog_post {

    document blog_post {

        field date_gmt type string {
            indexing: summary
        }

        field language type string {
            indexing: summary
        }

        field author type string {
            indexing: summary
        }

        field url type string {
            indexing: summary
        }

        field title type string {
            indexing: summary | index
        }

	    field blog type string {
	        indexing: summary
	    }

	    field post_id type string {
	        indexing: summary
	    }

        field tags type array<string> {
            indexing: summary
        }

        field blogname type string {
            indexing: summary
        }

        field content type string {
            indexing: summary | index
        }

        field categories type array<string> {
            indexing: summary | index
        }

        field user_item_cf type tensor(user_item_cf[10]) {
            indexing: summary | attribute
            attribute: tensor(user_item_cf[10])
        }

        field has_user_item_cf type byte {
            indexing: summary | attribute
            attribute: fast-search
        }

    }

    fieldset default {
        fields: author,title,tags,blogname,content,categories
    }


    constant W_hidden {
        file: constants/W_hidden.json
        type: tensor(input[20],hidden[40])
    }


    constant b_hidden {
        file: constants/b_hidden.json
        type: tensor(hidden[40])
    }


    constant W_final {
        file: constants/W_final.json
        type: tensor(hidden[40], final[1])
    }


    constant b_final {
        file: constants/b_final.json
        type: tensor(final[1])
    }


    rank-profile tensor {

        first-phase {
            expression: sum(query(user_item_cf) * attribute(user_item_cf))
        }

    }


    # rank profile with neural network model as second phase
    rank-profile nn_tensor {

        # The input to the neural network is the
        # concatenation of the document and query vectors.
        macro nn_input() {
            expression: concat(attribute(user_item_cf), query(user_item_cf), input)
        }

        # Computes the hidden layer
        macro hidden_layer() {
            expression: relu(sum(nn_input * constant(W_hidden), input) + constant(b_hidden))
        }

        # Computes the output layer
        macro final_layer() {
            expression: sigmoid(sum(hidden_layer * constant(W_final), hidden) + constant(b_final))
        }

        # First-phase ranking:
        # Dot-product between user and document latent factors
        first-phase {
            expression: sum(query(user_item_cf) * attribute(user_item_cf))
        }

        # Second-phase ranking:
        # Neural network model based on the user and latent factors
        second-phase {
            rerank-count: 200
            expression: sum(final_layer)
        }

    }

}
